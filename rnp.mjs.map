{"version":3,"file":"rnp.mjs","sources":["../src/util.js","../src/type.js","../src/lexer.js","../src/parser.js","../src/assembler.js","../src/index.js"],"sourcesContent":["'use strict';\n\nconst kMessage = Symbol('kMessage');\n\nfunction createMessage(source, location, specifier, message) {\n  if (location.start.line === location.end.line) {\n    const offset = location.start.column - 1;\n    const length = location.end.column - location.start.column;\n    const pad = ' '.repeat(String(location.start.line).length);\n    return `\\\n${pad}--> ${specifier}:${location.start.line}:${location.start.column}\n${pad} |\n${location.start.line} | ${source.split('\\n')[location.start.line - 1]}\n${pad} | ${' '.repeat(offset)}${'^'.repeat(length)} ${message}\n${pad} |`;\n  }\n\n  const lines = source\n    .split('\\n')\n    .slice(location.start.line - 1, location.end.line);\n\n  const lineNumMaxWidth = String(location.end.line).length;\n  const pad = ' '.repeat(lineNumMaxWidth);\n\n  const mapped = lines\n    .map((line, index) => {\n      const lineNum = location.start.line + index;\n      const start = `${lineNum.toString().padStart(lineNumMaxWidth, ' ')} | `;\n      if (index === 0) {\n        if (location.start.column === 1) {\n          return `${start}/ ${line}`;\n        }\n        return `${start}  ${line}\\n${pad} | --${'-'.repeat(location.start.column - 1)}^`;\n      }\n      if (index === lines.length - 1) {\n        return `${start}| ${line}\\n${pad} | |_${'_'.repeat(Math.max(location.end.column - 2, 0))}^ ${message}`;\n      }\n      return `${start}| ${line}`;\n    })\n    .join('\\n');\n\n  return `\\\n${pad}--> ${specifier}:${location.start.line}:${location.start.column}\n${pad} |\n${mapped}\n${pad} |`;\n}\n\nfunction createError(T, source, location, specifier, message) {\n  const payload = {\n    message,\n    location,\n    detail: createMessage(source, location, specifier, message),\n  };\n  const e = new T(message);\n  const oldPST = Error.prepareStackTrace;\n  Error.prepareStackTrace = (error, trace) => `    at ${trace.join('\\n    at ')}`;\n  e.stack = `\\\n${e.name}: ${e.message}\n${payload.detail}\n${e.stack}`;\n  Error.prepareStackTrace = oldPST;\n  e[kMessage] = payload;\n  return e;\n}\n\nmodule.exports = { createError, createMessage, kMessage };\n","'use strict';\n\nclass Type {\n  constructor(name) {\n    this.name = name.toLowerCase();\n  }\n\n  toString() {\n    return this.name;\n  }\n}\n\n[\n  'ANY',\n  'BOOLEAN',\n  'NUMBER',\n  'STRING',\n  'VOID',\n].forEach((t) => {\n  Type[t] = new Type(t);\n});\n\n// https://www.prepar3d.com/SDKv5/sdk/references/variables/units_of_measurement.html\nconst SimVarTypes = {\n  bool: Type.BOOLEAN,\n  boolean: Type.BOOLEAN,\n  number: Type.NUMBER,\n  string: Type.STRING,\n};\n\n// All the number types\n[\n  // Distance\n  'meters',\n  'centimeters',\n  'kilometers',\n  'millimeters',\n  'miles',\n  'decimiles',\n  'nautical miles',\n  'feet',\n  'inches',\n  'yards',\n  // Area\n  'square inches',\n  'square feet',\n  'square yards',\n  'square meters',\n  'square centimeters',\n  'square kilometers',\n  'square millimeters',\n  'square miles',\n  // Volume\n  'cubic inches',\n  'cubic feet',\n  'cubic yards',\n  'cubic miles',\n  'cubic milimeters',\n  'cubic centimeters',\n  'cubic meters',\n  'cubic kilometers',\n  'liters',\n  'gallons',\n  'quarts',\n  // Temperature\n  'kelvin',\n  'rankine',\n  'fahrenheit',\n  'celsius',\n  // Angle\n  'radians',\n  'rounds',\n  'degrees',\n  'degree latitude',\n  'degree longitude',\n  'grads',\n  // Global Position\n  'degrees latitude',\n  'degrees longitude',\n  'meters latitude',\n  // Angular Velocity\n  'radians per second',\n  'revolutions per minute',\n  'minutes per round',\n  'nice minutes per round',\n  'degrees per second',\n  // Speed\n  'meters per second',\n  'meters per minute',\n  'feet per second',\n  'feet per minute',\n  'kph',\n  'knots',\n  'mph',\n  'machs',\n  // Acceleration\n  'meters per second squared',\n  'g force',\n  'feet per second squared',\n  // Time\n  'seconds',\n  'minutes',\n  'hours',\n  'days',\n  'hours over 10',\n  // Power\n  'watts',\n  'ft lb per second',\n  'horsepower',\n  // Volume Rate\n  'meters cubed per second',\n  'gallons per hour',\n  'liters per hour',\n  // Weight\n  'kilograms',\n  'geepounds',\n  'pounds',\n  // Weight Rate\n  'kilograms per second',\n  'pounds per hour',\n  'pounds per second',\n  // Electrical Current\n  'amps',\n  // Electrical Potential\n  'volts',\n  // Frequency\n  'hz',\n  'khz',\n  'mhz',\n  // Density\n  'kilograms per cubic meter',\n  'slugs per cubic foot',\n  'pounds per gallon',\n  // Pressure\n  'pascals',\n  'newtons per square meter',\n  'kpa',\n  'kilogram force per square centimeter',\n  'mmHg',\n  'cmHg',\n  'inHg',\n  'atm',\n  'psi',\n  'millimeters of water',\n  'bars',\n  // Torque\n  'newton meter',\n  'foot-pounds',\n  // Misc\n  'part',\n  'half',\n  'third',\n  'percent',\n  'percent over 100',\n  'decibels',\n  'position 16k',\n  'position 32k',\n  'enum',\n].forEach((n) => {\n  SimVarTypes[n] = Type.NUMBER;\n});\n\nmodule.exports = {\n  Type,\n  SimVarTypes,\n};\n","'use strict';\n\nconst IDENT_START_RE = /\\p{ID_Start}/u;\nconst IDENT_CONTINUE_RE = /\\p{ID_Continue}/u;\n\nconst isIDStart = (c) => c && IDENT_START_RE.test(c);\nconst isIDContinue = (c) => c && IDENT_CONTINUE_RE.test(c);\n\nconst Token = {};\nconst TokenNames = {};\nconst TokenValues = {};\nconst TokenPrecedence = {};\nconst OperatorOverload = {};\n\nconst LexTree = {};\n\nconst MaybeAssignTokens = [\n  // Logical\n  ['OR', 'or', 4],\n  ['AND', 'and', 5],\n\n  // Binop\n  ['BIT_OR', '|', 6],\n  ['BIT_XOR', '^', 7],\n  ['BIT_AND', '&', 8],\n  ['SHL', '<<', 11],\n  ['SAR', '>>', 11],\n  ['MUL', '*', 13],\n  ['DIV', '/', 13],\n  ['IDIV', '//', 13, 'div'],\n  ['MOD', '%', 13],\n  ['EXP', '**', 14, 'pow'],\n\n  // Unop\n  ['ADD', '+', 12],\n  ['SUB', '-', 12],\n];\n\n[\n  ['ASSIGN', '=', 2],\n  ...MaybeAssignTokens.map((t) => [`ASSIGN_${t[0]}`, `${t[1]}=`, 2]),\n\n  // Relational\n  ['EQ', '==', 9],\n  ['NE', '!=', 9],\n  ['LT', '<', 10],\n  ['GT', '>', 10],\n  ['LTE', '<=', 10],\n  ['GTE', '>=', 10],\n\n  ...MaybeAssignTokens,\n\n  // Operators\n  ['NOT', '!'],\n  ['BIT_NOT', '~'],\n\n  // Keywords\n  ['IF', 'if'],\n  ['ELSE', 'else'],\n  ['LET', 'let'],\n  ['ALIAS', 'alias'],\n  ['MACRO', 'macro'],\n  ['TRUE', 'true'],\n  ['FALSE', 'false'],\n  ['IMPORT', 'import'],\n  ['EXPORT', 'export'],\n  ['FROM', 'from'],\n\n  // Other\n  ['NUMBER', null],\n  ['STRING', null],\n  ['IDENTIFIER', null],\n  ['MACRO_IDENTIFIER', null],\n  ['SIMVAR', null],\n  ['EOS', null],\n\n  ['COMMA', ','],\n  ['SEMICOLON', ';'],\n  ['LPAREN', '('],\n  ['RPAREN', ')'],\n  ['LBRACE', '{'],\n  ['RBRACE', '}'],\n  ['PERIOD', '.'],\n].forEach(([name, v, prec, overload], i) => {\n  Token[name] = i;\n  TokenNames[i] = name;\n  TokenValues[i] = v;\n  TokenPrecedence[name] = prec || 0;\n  TokenPrecedence[i] = TokenPrecedence[name];\n\n  if (overload) {\n    OperatorOverload[v] = overload;\n  }\n\n  if (v) {\n    let t = LexTree;\n    for (let n = 0; n < v.length; n += 1) {\n      t[v[n]] = t[v[n]] || {};\n      t = t[v[n]];\n    }\n    t.value = i;\n  }\n});\n\nclass Lexer {\n  constructor(source) {\n    this.source = source;\n    this.position = 0;\n    this.currentToken = undefined;\n    this.peekedToken = undefined;\n    this.scannedValue = undefined;\n    this.line = 1;\n    this.columnOffset = 0;\n    this.positionForNextToken = 0;\n    this.lineForNextToken = 0;\n    this.columnForNextToken = 0;\n  }\n\n  next() {\n    this.currentToken = this.peekedToken;\n    this.peekedToken = this.advance();\n    return this.currentToken;\n  }\n\n  peek() {\n    if (this.peekedToken === undefined) {\n      this.next();\n    }\n    return this.peekedToken;\n  }\n\n  test(t) {\n    return this.peek().type === t;\n  }\n\n  eat(t) {\n    if (this.test(t)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  expect(t) {\n    if (this.test(t)) {\n      return this.next();\n    }\n    return this.unexpected();\n  }\n\n  skipLineComment() {\n    while (this.position < this.source.length) {\n      this.position += 1;\n      if (this.source[this.position - 1] === '\\n') {\n        this.line += 1;\n        this.columnOffset = this.position;\n        return;\n      }\n    }\n  }\n\n  skipBlockComment() {\n    let n = 0;\n    do {\n      if (this.position >= this.source.length) {\n        this.raise('Unterminated block comment', this.position);\n      }\n      switch (this.source[this.position]) {\n        case '#':\n          this.position += 1;\n          if (this.source[this.position] === '*') {\n            this.position += 1;\n            n += 1;\n          }\n          break;\n        case '*':\n          this.position += 1;\n          if (this.source[this.position] === '#') {\n            this.position += 1;\n            n -= 1;\n          }\n          break;\n        default:\n          if (this.source[this.position] === '\\n') {\n            this.line += 1;\n            this.columnOffset = this.position;\n          }\n          this.position += 1;\n          break;\n      }\n    } while (n > 0);\n  }\n\n  skipWhitespace() {\n    while (this.position < this.source.length) {\n      switch (this.source[this.position]) {\n        case ' ':\n        case '\\t':\n          this.position += 1;\n          break;\n        case '\\n':\n          this.position += 1;\n          this.line += 1;\n          this.columnOffset = this.position;\n          break;\n        case '#':\n          if (this.source[this.position + 1] === '*') {\n            this.skipBlockComment();\n          } else {\n            this.skipLineComment();\n          }\n          break;\n        default:\n          return;\n      }\n    }\n  }\n\n  advance() {\n    const type = this.scan();\n    const value = this.scannedValue;\n    this.scannedValue = undefined;\n    return {\n      type,\n      value,\n      startIndex: this.positionForNextToken,\n      endIndex: this.position,\n      line: this.lineForNextToken,\n      column: this.columnForNextToken,\n      endLine: this.line,\n      endColumn: this.position - this.columnOffset + 1,\n    };\n  }\n\n  scan() {\n    this.skipWhitespace();\n\n    this.positionForNextToken = this.position;\n    this.lineForNextToken = this.line;\n    this.columnForNextToken = this.position - this.columnOffset + 1;\n\n    if (this.position >= this.source.length) {\n      return Token.EOS;\n    }\n\n    switch (this.source[this.position]) {\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        return this.scanNumber();\n      case '\\'':\n        return this.scanString();\n      case '(':\n        this.position += 1;\n        if (this.source[this.position + 1] === ':') {\n          return this.scanSimVar();\n        }\n        return Token.LPAREN;\n      case '-':\n        if (/\\d/.test(this.source[this.position + 1])) {\n          return this.scanNumber();\n        }\n        this.position += 1;\n        this.scannedValue = TokenValues[Token.SUB];\n        return Token.SUB;\n      default: {\n        let match = LexTree[this.source[this.position]];\n        const start = this.position;\n        if (match) {\n          this.position += 1;\n          while (match[this.source[this.position]]) {\n            match = match[this.source[this.position]];\n            this.position += 1;\n          }\n          if (match.value !== undefined) {\n            this.scannedValue = TokenValues[match.value];\n            return match.value;\n          }\n          this.position = start;\n        }\n        if (isIDStart(this.source[this.position]) || this.source[this.position] === '$') {\n          this.position += 1;\n          while (isIDContinue(this.source[this.position])) {\n            this.position += 1;\n          }\n          this.scannedValue = this.source.slice(start, this.position);\n          return this.scannedValue.startsWith('$')\n            ? Token.MACRO_IDENTIFIER\n            : Token.IDENTIFIER;\n        }\n        return this.unexpected(this.position);\n      }\n    }\n  }\n\n  scanNumber() {\n    const start = this.position;\n    if (this.source[this.position] === '-') {\n      this.position += 1;\n    }\n    let base = 10;\n    if (this.source[this.position] === '0') {\n      this.position += 1;\n      switch (this.source[this.position]) {\n        case 'x':\n          this.position += 1;\n          base = 16;\n          break;\n        case 'o':\n          this.position += 1;\n          base = 8;\n          break;\n        case 'b':\n          this.position += 1;\n          base = 2;\n          break;\n        case '.':\n          break;\n        default:\n          this.scannedValue = 0;\n          return Token.NUMBER;\n      }\n    }\n    const check = {\n      16: (c) => c && /[\\da-f]/u.test(c),\n      10: (c) => c && /\\d/u.test(c),\n      8: (c) => c && /[0-7]/u.test(c),\n      2: (c) => c && /[01]/u.test(c),\n    }[base];\n    while (this.position < this.source.length) {\n      if (check(this.source[this.position])) {\n        this.position += 1;\n      } else {\n        break;\n      }\n    }\n    if (base === 10 && this.source[this.position] === '.'\n        && check(this.source[this.position + 1])) {\n      this.position += 1;\n      while (this.position < this.source.length) {\n        if (check(this.source[this.position])) {\n          this.position += 1;\n        } else {\n          break;\n        }\n      }\n    }\n    const buffer = this.source.slice(base === 10 ? start : start + 2, this.position);\n    this.scannedValue = base === 10\n      ? Number.parseFloat(buffer, base)\n      : Number.parseInt(buffer, base);\n    return Token.NUMBER;\n  }\n\n  scanString() {\n    this.position += 1;\n    let buffer = '';\n    while (true) { // eslint-disable-line no-constant-condition\n      if (this.position >= this.source.length) {\n        this.raise('Unterminated string', this.position);\n      }\n      const c = this.source[this.position];\n      if (c === '\\'') {\n        this.position += 1;\n        break;\n      }\n      if (c === '\\n') {\n        this.raise('Unterminated string', this.position);\n      }\n      this.position += 1;\n      buffer += c;\n    }\n    this.scannedValue = buffer;\n    return Token.STRING;\n  }\n\n  scanSimVar() {\n    const nameStart = this.position;\n    let typeStart = -1;\n    while (true) { // eslint-disable-line no-constant-condition\n      if (this.position >= this.source.length || this.source[this.position] === '\\n') {\n        this.raise('Unexpected end of simvar', this.position);\n      }\n      if (typeStart === -1 && this.source[this.position] === ',') {\n        typeStart = this.position;\n      }\n      if (this.source[this.position] === ')') {\n        break;\n      }\n      this.position += 1;\n    }\n    this.position += 1;\n    const name = this.source\n      .slice(nameStart, typeStart === -1 ? this.position - 1 : typeStart)\n      .trim();\n    const type = typeStart === -1\n      ? null\n      : this.source.slice(typeStart + 1, this.position - 1).trim();\n    this.scannedValue = { name, type };\n    return Token.SIMVAR;\n  }\n}\n\nmodule.exports = {\n  Lexer,\n  Token,\n  TokenPrecedence,\n  TokenNames,\n  OperatorOverload,\n};\n","'use strict';\n\nconst {\n  Lexer,\n  Token,\n  TokenPrecedence,\n} = require('./lexer');\nconst { createError } = require('./util');\n\nclass Parser extends Lexer {\n  constructor(source, specifier) {\n    super(source);\n    this.specifier = specifier;\n    this.insideMacro = false;\n    this.isTopLevel = true;\n  }\n\n  static parse(source, specifier) {\n    const p = new Parser(source, specifier);\n    return p.parseProgram();\n  }\n\n  raise(message, context = this.peek()) {\n    if (context.type === Token.EOS && message === 'Unexpected token') {\n      message = 'Unexpected end of source';\n    }\n\n    let line;\n    let startColumn;\n    let endColumn;\n\n    if (typeof context === 'number' || context.type === Token.EOS) {\n      line = this.line;\n      let startIndex = typeof context === 'number' ? context : context.startIndex;\n      if (startIndex === this.source.length) {\n        while (this.source[startIndex - 1] === '\\n') {\n          line -= 1;\n          startIndex -= 1;\n        }\n        startColumn = startIndex - this.source.lastIndexOf('\\n', startIndex - 1);\n      } else {\n        startColumn = startIndex - this.columnOffset + 1;\n      }\n      endColumn = startColumn + 1;\n    } else if (context.location) {\n      line = context.location.start.line;\n      startColumn = context.location.start.column;\n      endColumn = context.location.end.column;\n    } else {\n      ({\n        line,\n        column: startColumn,\n        endColumn,\n      } = context);\n    }\n\n    throw createError(SyntaxError, this.source, {\n      start: {\n        line,\n        column: startColumn,\n      },\n      end: {\n        line,\n        column: endColumn,\n      },\n    }, this.specifier, message);\n  }\n\n  unexpected(context) {\n    this.raise('Unexpected token', context);\n  }\n\n  startNode(inheritStart = undefined) {\n    this.peek();\n    return {\n      type: undefined,\n      location: {\n        startIndex: inheritStart\n          ? inheritStart.location.startIndex\n          : this.peekedToken.startIndex,\n        endIndex: -1,\n        start: inheritStart ? { ...inheritStart.location.start } : {\n          line: this.peekedToken.line,\n          column: this.peekedToken.column,\n        },\n        end: {\n          line: -1,\n          column: -1,\n        },\n      },\n    };\n  }\n\n  finishNode(node, type) {\n    node.type = type;\n    node.location.endIndex = this.currentToken.endIndex;\n    node.location.end.line = this.currentToken.endLine;\n    node.location.end.column = this.currentToken.endColumn;\n    return node;\n  }\n\n  // Program :\n  //   StatementList\n  parseProgram() {\n    const node = this.startNode();\n    node.statements = this.parseStatementList(Token.EOS);\n    return this.finishNode(node, 'Program');\n  }\n\n  // StatementList :\n  //   Statement\n  //   StatementList Statement\n  parseStatementList(end) {\n    const statements = [];\n    while (!this.eat(end)) {\n      statements.push(this.parseStatement(end));\n    }\n    return statements;\n  }\n\n  // Statement :\n  //   ImportDeclaration\n  //   LocalDeclaration\n  //   MacroDeclaration\n  //   Assignment\n  //   If\n  //   Block\n  //   Expression `;`\n  parseStatement(end) {\n    switch (this.peek().type) {\n      case Token.IMPORT:\n        return this.parseImportDeclaration();\n      case Token.LET:\n        return this.parseLocalDeclaration();\n      case Token.ALIAS:\n        return this.parseAliasDeclaration();\n      case Token.EXPORT:\n      case Token.MACRO:\n        if (this.insideMacro) {\n          this.raise('Cannot declare macro inside macro');\n        }\n        return this.parseMacroDeclaration();\n      case Token.IF: {\n        const expr = this.parseIf();\n        expr.statement = true;\n        return expr;\n      }\n      case Token.LBRACE: {\n        const expr = this.parseBlock();\n        expr.statement = true;\n        return expr;\n      }\n      default: {\n        const expr = this.parseExpression();\n        if ((expr.type === 'SimVar' || expr.type === 'Identifier')\n            && TokenPrecedence[this.peek().type] === TokenPrecedence.ASSIGN) {\n          return this.parseAssignment(expr);\n        }\n        if (this.eat(Token.SEMICOLON)) {\n          return expr;\n        }\n        if (!this.test(end)) {\n          // custom line/column for exact positioning of caret\n          this.raise('Expected semicolon after expression', {\n            line: expr.location.end.line,\n            column: expr.location.end.column,\n            endColumn: expr.location.end.column + 1,\n          });\n        }\n        expr.hasSemicolon = false;\n        return expr;\n      }\n    }\n  }\n\n  // ImportDeclaration :\n  //   `import` `{` names `}` from StringLiteral `;`\n  parseImportDeclaration() {\n    const node = this.startNode();\n    this.expect(Token.IMPORT);\n    this.expect(Token.LBRACE);\n    node.imports = [];\n    while (!this.eat(Token.RBRACE)) {\n      node.imports.push(this.parseIdentifier());\n      if (this.eat(Token.RBRACE)) {\n        break;\n      }\n      this.expect(Token.COMMA);\n    }\n    this.expect(Token.FROM);\n    node.specifier = this.parseStringLiteral();\n    this.expect(Token.SEMICOLON);\n    return this.finishNode(node, 'ImportDeclaration');\n  }\n\n  // LocalDeclaration :\n  //   `let` Identifier `=` Expression `;`\n  parseLocalDeclaration() {\n    const node = this.startNode();\n    this.expect(Token.LET);\n    node.name = this.parseIdentifier();\n    this.expect(Token.ASSIGN);\n    node.value = this.parseExpression();\n    this.expect(Token.SEMICOLON);\n    return this.finishNode(node, 'LocalDeclaration');\n  }\n\n  // AliasDeclaration :\n  //   `alias` Identifier `=` SimVar `;`\n  parseAliasDeclaration() {\n    const node = this.startNode();\n    this.expect(Token.ALIAS);\n    node.name = this.parseIdentifier();\n    this.expect(Token.ASSIGN);\n    node.simvar = this.parseSimVar();\n    if (!node.simvar.value.type) {\n      this.raise('Aliased simvars must have a unit', node.simvar);\n    }\n    this.expect(Token.SEMICOLON);\n    return this.finishNode(node, 'AliasDeclaration');\n  }\n\n  // MacroDeclaration :\n  //   `export`? `macro` Identifier `(` Parameters `)` Block\n  parseMacroDeclaration() {\n    const node = this.startNode();\n    node.isExported = this.isTopLevel && this.eat(Token.EXPORT);\n    this.expect(Token.MACRO);\n    node.name = this.parseIdentifier();\n    this.expect(Token.LPAREN);\n    node.parameters = [];\n    while (true) { // eslint-disable-line no-constant-condition\n      if (this.eat(Token.RPAREN)) {\n        break;\n      }\n      node.parameters.push(this.parseMacroIdentifier());\n      if (this.eat(Token.RPAREN)) {\n        break;\n      }\n      this.expect(Token.COMMA);\n    }\n    this.insideMacro = true;\n    node.body = this.parseBlock();\n    this.insideMacro = false;\n    return this.finishNode(node, 'MacroDeclaration');\n  }\n\n  // Assignment :\n  //   SimVar = Expression `;`\n  //   Identifier = Expression `;`\n  //   SimVar @= Expression `;`\n  //   Identifier @= Expression `;`\n  parseAssignment(left) {\n    const node = this.startNode(left);\n    node.left = left;\n    if (this.eat(Token.ASSIGN)) {\n      node.right = this.parseExpression();\n    } else {\n      const binop = this.startNode(left);\n      binop.left = left;\n      binop.operator = this.next().value.slice(0, -1);\n      binop.right = this.parseExpression();\n      node.right = this.finishNode(binop, 'BinaryExpression');\n    }\n    this.expect(Token.SEMICOLON);\n    return this.finishNode(node, 'Assignment');\n  }\n\n  // Expression :\n  //   AssignmentExpression\n  parseExpression() {\n    return this.parseBinaryExpression(TokenPrecedence.OR);\n  }\n\n  // BinaryExpression :\n  //   a lot of rules ok\n  parseBinaryExpression(precedence, initialX = this.parseUnaryExpression()) {\n    let p = TokenPrecedence[this.peek().type];\n    let x = initialX;\n    if (p >= precedence) {\n      do {\n        while (TokenPrecedence[this.peek().type] === p) {\n          const node = this.startNode(x);\n          node.left = x;\n          node.operator = this.next().value;\n          node.right = this.parseBinaryExpression(p + 1);\n          x = this.finishNode(node, 'BinaryExpression');\n        }\n        p -= 1;\n      } while (p >= precedence);\n    }\n    return x;\n  }\n\n  // UnaryExpression :\n  //   MethodExpression\n  //   `!` UnaryExpression\n  //   `~` UnaryExpression\n  //   `-` UnaryExpression\n  parseUnaryExpression() {\n    const node = this.startNode();\n    switch (this.peek().type) {\n      case Token.NOT:\n      case Token.BIT_NOT:\n      case Token.SUB:\n        node.operator = this.next().value;\n        node.operand = this.parseUnaryExpression();\n        return this.finishNode(node, 'UnaryExpression');\n      default:\n        return this.parseMethodExpression();\n    }\n  }\n\n  // MethodExpression\n  //   MacroExpansion\n  //   MethodExpression `.` Identifier `(` Arguments `)`\n  parseMethodExpression() {\n    let left = this.parseMacroExpansion();\n    while (this.eat(Token.PERIOD)) {\n      const node = this.startNode(left);\n      node.target = left;\n      node.callee = this.parseIdentifier();\n      node.arguments = this.parseArguments();\n      left = this.finishNode(node, 'MethodExpression');\n    }\n    return left;\n  }\n\n  // MacroExpansion :\n  //   PrimaryExpression\n  //   Identifier `(` Arguments `)`\n  parseMacroExpansion() {\n    const left = this.parsePrimaryExpression();\n    if (left.type === 'Identifier' && this.test(Token.LPAREN)) {\n      const node = this.startNode(left);\n      node.name = left;\n      node.arguments = this.parseArguments();\n      return this.finishNode(node, 'MacroExpansion');\n    }\n    return left;\n  }\n\n  // Arguments :\n  //   `(` ArgumentList `,`? `)`\n  // ArgumentList :\n  //   Expression\n  //   ArgumentList `,` Expression\n  parseArguments() {\n    const startParen = this.expect(Token.LPAREN);\n    const args = [];\n    while (!this.test(Token.RPAREN)) {\n      args.push(this.parseExpression());\n      if (this.test(Token.RPAREN)) {\n        break;\n      }\n      this.expect(Token.COMMA);\n    }\n    const endParen = this.expect(Token.RPAREN);\n    args.location = {\n      start: {\n        line: startParen.line,\n        column: startParen.column,\n      },\n      end: {\n        line: endParen.endLine,\n        column: endParen.endColumn,\n      },\n    };\n    return args;\n  }\n\n  // PrimaryExpression :\n  //   Identifier\n  //   BooleanLiteral\n  //   NumberLiteral\n  //   StringLiteral\n  //   `(` Expression `)`\n  //   SimVar\n  //   If\n  parsePrimaryExpression() {\n    switch (this.peek().type) {\n      case Token.IDENTIFIER:\n        return this.parseIdentifier();\n      case Token.MACRO_IDENTIFIER:\n        if (!this.insideMacro) {\n          this.unexpected();\n        }\n        return this.parseMacroIdentifier();\n      case Token.TRUE:\n      case Token.FALSE: {\n        const node = this.startNode();\n        node.value = this.next().value === 'true';\n        return this.finishNode(node, 'BooleanLiteral');\n      }\n      case Token.NUMBER: {\n        const node = this.startNode();\n        node.value = this.next().value;\n        return this.finishNode(node, 'NumberLiteral');\n      }\n      case Token.STRING:\n        return this.parseStringLiteral();\n      case Token.LPAREN: {\n        this.next();\n        const node = this.parseExpression();\n        this.expect(Token.RPAREN);\n        return node;\n      }\n      case Token.SIMVAR:\n        return this.parseSimVar();\n      case Token.IF:\n        return this.parseIf();\n      case Token.LBRACE:\n        return this.parseBlock();\n      default:\n        return this.unexpected();\n    }\n  }\n\n  // Identifier :\n  //   ID_Start ID_Continue*\n  parseIdentifier() {\n    const node = this.startNode();\n    node.value = this.expect(Token.IDENTIFIER).value;\n    return this.finishNode(node, 'Identifier');\n  }\n\n  // MacroIdentifier :\n  //   `$` ID_Continue*\n  parseMacroIdentifier() {\n    const node = this.startNode();\n    node.value = this.expect(Token.MACRO_IDENTIFIER).value;\n    return this.finishNode(node, 'MacroIdentifier');\n  }\n\n  // SimVar :\n  //   `(` any char `:` any chars `)`\n  parseSimVar() {\n    const node = this.startNode();\n    node.value = this.expect(Token.SIMVAR).value;\n    return this.finishNode(node, 'SimVar');\n  }\n\n  // StringLiteral :\n  //   `'` any chars `'`\n  parseStringLiteral() {\n    const node = this.startNode();\n    node.value = this.expect(Token.STRING).value;\n    return this.finishNode(node, 'StringLiteral');\n  }\n\n  // If :\n  //   `if` Expression Block [lookahead != `else`]\n  //   `if` Expression Block `else` Block\n  //   `if` Expression Block If\n  parseIf() {\n    const node = this.startNode();\n    this.expect(Token.IF);\n    node.statement = false;\n    node.test = this.parseExpression();\n    node.consequent = this.parseBlock();\n    if (this.eat(Token.ELSE)) {\n      node.alternative = this.test(Token.IF)\n        ? { // wrap in block for assembler formatting\n          type: 'Block',\n          statement: false,\n          statements: [this.parseIf()],\n        }\n        : this.parseBlock();\n    } else {\n      node.alternative = null;\n    }\n    return this.finishNode(node, 'If');\n  }\n\n  // Block :\n  //   `{` StatementList `}`\n  parseBlock() {\n    const node = this.startNode();\n    this.expect(Token.LBRACE);\n    node.statement = false;\n    const oldToplevel = this.isTopLevel;\n    this.isTopLevel = false;\n    node.statements = this.parseStatementList(Token.RBRACE);\n    this.isTopLevel = oldToplevel;\n    return this.finishNode(node, 'Block');\n  }\n}\n\nmodule.exports = { Parser };\n","'use strict';\n\nconst { OperatorOverload } = require('./lexer');\nconst { Parser } = require('./parser');\nconst { createError, createMessage } = require('./util');\nconst { Type, SimVarTypes } = require('./type');\n\nconst OpTypes = {\n  '+': [Type.NUMBER, Type.NUMBER],\n  '-': [Type.NUMBER, Type.NUMBER],\n  '/': [Type.NUMBER, Type.NUMBER],\n  '//': [Type.NUMBER, Type.NUMBER],\n  '*': [Type.NUMBER, Type.NUMBER],\n  '%': [Type.NUMBER, Type.NUMBER],\n  '**': [Type.NUMBER, Type.NUMBER],\n  // == and != can be applied to number and string\n  // '==': [Type.NUMBER, Type.BOOLEAN],\n  // '!=': [Type.NUMBER, Type.BOOLEAN],\n  '>': [Type.NUMBER, Type.BOOLEAN],\n  '<': [Type.NUMBER, Type.BOOLEAN],\n  '>=': [Type.NUMBER, Type.BOOLEAN],\n  '<=': [Type.NUMBER, Type.BOOLEAN],\n  '&': [Type.NUMBER, Type.NUMBER],\n  '|': [Type.NUMBER, Type.NUMBER],\n  '^': [Type.NUMBER, Type.NUMBER],\n  '~': [Type.NUMBER, Type.NUMBER],\n  '>>': [Type.NUMBER, Type.NUMBER],\n  '<<': [Type.NUMBER, Type.NUMBER],\n  '!': [Type.BOOLEAN, Type.BOOLEAN],\n  'and': [Type.BOOLEAN, Type.BOOLEAN],\n  'or': [Type.BOOLEAN, Type.BOOLEAN],\n};\n\nconst formatSimVar = (s) => {\n  if (s.type) {\n    return `${s.name}, ${s.type}`;\n  }\n  return `${s.name}`;\n};\n\nconst REGISTER_MAX = 50;\n\nclass Assembler {\n  constructor(expectedReturnType, source, specifier, getSource) {\n    this.source = source;\n    this.expectedReturnType = expectedReturnType;\n    this.specifier = specifier;\n    this.getSource = getSource;\n    this.warnings = [];\n    this.stack = [];\n    this.scope = null;\n    this.registerIndex = 0;\n    this.exports = new Map();\n\n    this.indent = 0;\n    this.lines = [];\n    this.output = [];\n  }\n\n  static assemble(ast, ...args) {\n    const a = new Assembler(...args);\n    a.visit(ast);\n    return {\n      warnings: a.warnings,\n      output: a.getOutput(),\n    };\n  }\n\n  raise(T, message, context) {\n    throw createError(T, this.source, context.location, this.specifier, message);\n  }\n\n  warn(message, context) {\n    const detail = createMessage(this.source, context.location, this.specifier, message);\n    this.warnings.push({ detail, message, location: context.location });\n  }\n\n  emit(s) {\n    this.output.push(s);\n  }\n\n  line() {\n    if (this.output.length > 0) {\n      this.lines.push('  '.repeat(this.indent) + this.output.join(' '));\n    }\n    this.output = [];\n  }\n\n  getOutput() {\n    return this.lines.join('\\n');\n  }\n\n  push(t) {\n    /* istanbul ignore next */\n    if (t === Type.VOID) {\n      throw new RangeError('tried to push void');\n    }\n    this.stack.push(t);\n  }\n\n  pop() {\n    return this.stack.pop() || Type.VOID;\n  }\n\n  pushScope() {\n    const scope = {\n      locals: new Map(),\n      startIndex: this.registerIndex,\n      outer: this.scope,\n    };\n    this.scope = scope;\n  }\n\n  popScope() {\n    const { scope } = this;\n    this.scope = scope.outer;\n    this.registerIndex = scope.startIndex;\n  }\n\n  declare(name, data) {\n    if (this.resolve(name) !== null) {\n      return false;\n    }\n    this.scope.locals.set(name, data);\n    return true;\n  }\n\n  resolve(name) {\n    for (let s = this.scope; s !== null; s = s.outer) {\n      if (s.locals.has(name)) {\n        return s.locals.get(name);\n      }\n    }\n    return null;\n  }\n\n  visit(node) {\n    this[`visit${node.type}`](node);\n  }\n\n  visitStatementList(statements) {\n    statements.forEach((s) => {\n      this.visit(s);\n      if (s.hasSemicolon !== false) {\n        const t0 = this.pop();\n        if (t0 !== Type.VOID) {\n          this.warn('Unused value', s);\n          this.emit('p');\n        }\n      }\n      this.line();\n    });\n  }\n\n  visitProgram(node) {\n    this.pushScope();\n    this.visitStatementList(node.statements);\n    this.popScope();\n    const t0 = this.pop();\n    if (t0 !== this.expectedReturnType) {\n      this.raise(TypeError, `Program expected ${this.expectedReturnType} but got ${t0}`, node);\n    }\n  }\n\n  visitImportDeclaration(node) {\n    const { source, specifier } = this.getSource\n      ? this.getSource(this.specifier, node.specifier.value)\n      : this.raise(Error, `Could not resolve '${node.specifier.value}' from '${this.specifier}'`, node.specifier);\n    const ast = Parser.parse(source, specifier);\n    const a = new Assembler(Type.VOID, source, specifier, this.getSource);\n    a.visit(ast);\n    for (const i of node.imports) {\n      if (!a.exports.has(i.value)) {\n        this.raise(ReferenceError, `${node.specifier.value} does not export ${i.value}`, i);\n      }\n      if (!this.declare(i.value, a.exports.get(i.value))) {\n        this.raise(SyntaxError, `Cannot shadow or redeclare ${i.value}`, i);\n      }\n    }\n  }\n\n  visitLocalDeclaration(node) {\n    this.visit(node.value);\n    const t0 = this.pop();\n    if (t0 === Type.VOID) {\n      this.raise(TypeError, `Expected a value but got ${t0}`, node.value);\n    }\n    const register = this.registerIndex;\n    if (register >= REGISTER_MAX) {\n      this.raise(RangeError, 'ran out of registers!!', node.name);\n    }\n    if (!this.declare(node.name.value, { register, type: t0 })) {\n      this.raise(SyntaxError, `Cannot shadow or redeclare ${node.name.value}`, node.name);\n    }\n    this.registerIndex += 1;\n    this.emit(`sp${register}`);\n  }\n\n  visitAliasDeclaration(node) {\n    if (!this.declare(node.name.value, { alias: node.simvar })) {\n      this.raise(SyntaxError, `Cannot shadow or redeclare ${node.name.value}`, node.name);\n    }\n  }\n\n  visitMacroDeclaration(node) {\n    if (!this.declare(node.name.value, { node, scope: this.scope })) {\n      this.raise(SyntaxError, `Cannot shadow or redeclare ${node.name.value}`, node.name);\n    }\n    if (node.isExported) {\n      this.exports.set(node.name.value, { node, scope: null });\n    }\n  }\n\n  visitMacroExpansion(node) {\n    const calleeScope = this.scope;\n\n    const macro = this.resolve(node.name.value);\n    if (macro === null) {\n      this.raise(ReferenceError, `${node.name.value} is not declared`, node.name);\n    }\n    if (node.arguments.length !== macro.node.parameters.length) {\n      this.raise(SyntaxError, `Expected ${macro.node.parameters.length} arguments`, node.arguments);\n    }\n\n    const savedScope = this.scope;\n    this.scope = macro.scope;\n    this.pushScope();\n\n    macro.node.parameters.forEach((p, i) => {\n      const a = node.arguments[i];\n      if (!this.declare(p.value, { node: a, scope: calleeScope })) {\n        this.raise(SyntaxError, `Cannot shadow or redeclare ${p.value}`, p);\n      }\n    });\n    this.visit(macro.node.body);\n\n    this.popScope();\n    this.scope = savedScope;\n  }\n\n  visitMacroIdentifier(node) {\n    const i = this.resolve(node.value);\n    if (i === null) {\n      this.raise(ReferenceError, `${node.value} is not declared`, node);\n    }\n    const savedScope = this.scope;\n    this.scope = i.scope;\n    this.visit(i.node);\n    this.scope = savedScope;\n  }\n\n  visitAssignment(node) {\n    this.visit(node.right);\n    const t0 = this.pop();\n    switch (node.left.type) {\n      case 'SimVar':\n        if (node.left.value.type) {\n          if (t0 !== SimVarTypes[node.left.value.type]) {\n            this.raise(TypeError, `Expected ${SimVarTypes[node.left.value.type]} but got ${t0}`, node.right);\n          }\n        }\n        this.emit(`(>${formatSimVar(node.left.value)})`);\n        break;\n      case 'Identifier': {\n        const local = this.resolve(node.left.value);\n        if (local === null) {\n          this.raise(ReferenceError, `${node.left.value} is not declared`, node.left);\n        }\n        if (local.alias) {\n          if (t0 !== SimVarTypes[local.alias.value.type]) {\n            this.raise(TypeError, `Expected ${SimVarTypes[local.alias.value.type]} but got ${t0}`, node.right);\n          }\n          this.emit(`(>${formatSimVar(local.alias.value)})`);\n        } else {\n          if (t0 !== local.type) {\n            this.raise(TypeError, `Expected ${local.type} but got ${t0}`, node.right);\n          }\n          this.emit(`sp${local.register}`);\n        }\n        break;\n      }\n      /* istanbul ignore next */\n      default:\n        throw new RangeError(node.left.type);\n    }\n  }\n\n  visitUnaryExpression(node) {\n    this.visit(node.operand);\n    const [i, o] = OpTypes[node.operator];\n    const t = this.pop();\n    if (t !== i) {\n      this.raise(TypeError, `Expected ${i} but got ${t}`, node.operand);\n    }\n    this.emit(OperatorOverload[node.operator] || node.operator);\n    this.push(o);\n  }\n\n  visitBinaryExpression(node) {\n    this.visit(node.left);\n    const t1 = this.pop();\n    this.visit(node.right);\n    const t2 = this.pop();\n    if (t1 !== t2) {\n      this.raise(TypeError, `Expected both operands to be the same type but got ${t1} and ${t2}`, node);\n    }\n    let i;\n    let o;\n    switch (node.operator) {\n      case '==':\n      case '!=':\n        if (t1 === Type.STRING) {\n          i = Type.STRING;\n        } else if (t1 === Type.BOOLEAN) {\n          i = Type.BOOLEAN;\n        } else {\n          i = Type.NUMBER;\n        }\n        o = Type.BOOLEAN;\n        break;\n      default:\n        ([i, o] = OpTypes[node.operator]);\n        break;\n    }\n    if (t1 !== i) {\n      // t2 does not need to be checked here because we checked that it == t1 above\n      this.raise(TypeError, `Expected ${i} but got ${t1}`, node.left);\n    }\n    switch (node.operator) {\n      case '==':\n      case '!=':\n        if (i === Type.STRING) {\n          this.emit(`scmp 0 ${node.operator}`);\n        } else {\n          this.emit(node.operator);\n        }\n        break;\n      default:\n        this.emit(OperatorOverload[node.operator] || node.operator);\n        break;\n    }\n    this.push(o);\n  }\n\n  visitMethodExpression(node) {\n    const ops = {\n      abs: ['abs', Type.NUMBER, [], Type.NUMBER],\n      floor: ['flr', Type.NUMBER, [], Type.NUMBER],\n      range: ['rng', Type.NUMBER, [Type.NUMBER, Type.NUMBER], Type.NUMBER],\n      cos: ['cos', Type.NUMBER, [], Type.NUMBER],\n      min: ['min', Type.NUMBER, [Type.NUMBER], Type.NUMBER],\n      sin: ['sin', Type.NUMBER, [], Type.NUMBER],\n      acos: ['acos', Type.NUMBER, [], Type.NUMBER],\n      ctg: ['ctg', Type.NUMBER, [], Type.NUMBER],\n      ln: ['ln', Type.NUMBER, [], Type.NUMBER],\n      square: ['sqr', Type.NUMBER, [], Type.NUMBER],\n      asin: ['asin', Type.NUMBER, [], Type.NUMBER],\n      eps: ['eps', Type.NUMBER, [], Type.NUMBER],\n      log: ['log', Type.NUMBER, [Type.NUMBER], Type.NUMBER],\n      sqrt: ['sqrt', Type.NUMBER, [], Type.NUMBER],\n      atg2: ['atg2', Type.NUMBER, [Type.NUMBER], Type.NUMBER],\n      exp: ['exp', Type.NUMBER, [], Type.NUMBER],\n      max: ['max', Type.NUMBER, [Type.NUMBER], Type.NUMBER],\n      tan: ['tg', Type.NUMBER, [], Type.NUMBER],\n      atan: ['atg', Type.NUMBER, [], Type.NUMBER],\n      d360: ['d360', Type.NUMBER, [], Type.NUMBER],\n      toDegrees: ['rddg', Type.NUMBER, [], Type.NUMBER],\n      toRadians: ['dgrd', Type.NUMBER, [], Type.NUMBER],\n      rnor: ['rnor', Type.NUMBER, [], Type.NUMBER],\n      toLowerCase: ['lc', Type.STRING, [], Type.STRING],\n      toUpperCase: ['uc', Type.STRING, [], Type.STRING],\n    };\n    if (ops[node.callee.value]) {\n      const [raw, self, args, ret] = ops[node.callee.value];\n\n      const checkSelf = () => {\n        this.visit(node.target);\n        const t0 = this.pop();\n        if (t0 !== self) {\n          this.raise(TypeError, `Expected ${self} but got ${t0}`, node.target);\n        }\n      };\n      if (node.callee.value !== 'range') {\n        checkSelf();\n      }\n\n      if (args.length !== node.arguments.length) {\n        this.raise(TypeError, `Expected ${args.length} arguments`, node.arguments);\n      }\n      node.arguments.forEach((a, i) => {\n        this.visit(a);\n        const t = this.pop();\n        if (t !== args[i]) {\n          this.raise(TypeError, `Expected ${args[i]} but got ${t}`, a);\n        }\n      });\n\n      if (node.callee.value === 'range') {\n        checkSelf();\n      }\n\n      this.emit(raw);\n      this.push(ret);\n    } else {\n      this.raise(TypeError, `${node.callee.value} is not a valid operator`, node.callee);\n    }\n  }\n\n  visitIdentifier(node) {\n    const local = this.resolve(node.value);\n    if (local === null) {\n      this.raise(ReferenceError, `${node.value} is not declared`, node);\n    }\n    if (local.alias) {\n      this.visit(local.alias);\n    } else {\n      this.emit(`l${local.register}`);\n      this.push(local.type);\n    }\n  }\n\n  visitBooleanLiteral(node) {\n    this.emit(node.value ? '1' : '0');\n    this.push(Type.BOOLEAN);\n  }\n\n  visitNumberLiteral(node) {\n    this.emit(node.value.toString());\n    this.push(Type.NUMBER);\n  }\n\n  visitStringLiteral(node) {\n    this.emit(`'${node.value.toString()}'`);\n    this.push(Type.STRING);\n  }\n\n  visitSimVar(node) {\n    this.emit(`(${formatSimVar(node.value)})`);\n    this.push(SimVarTypes[node.value.type] || Type.ANY);\n  }\n\n  visitIf(node) {\n    this.visit(node.test);\n    const t = this.pop();\n    if (t !== Type.BOOLEAN) {\n      this.raise(TypeError, `Expected ${Type.BOOLEAN} but got ${t}`, node.test);\n    }\n\n    const visitBranch = (open, n) => {\n      const len = this.stack.length;\n\n      this.emit(open);\n      this.line();\n      this.indent += 1;\n      this.visit(n);\n      this.indent -= 1;\n      this.emit('}');\n\n      /* istanbul ignore next */\n      if (this.stack.length - len < 0) {\n        throw new RangeError('values popped');\n      }\n      if (this.stack.length !== len) {\n        return this.pop();\n      }\n      return Type.VOID;\n    };\n\n    const t0 = visitBranch('if{', node.consequent);\n    if (t0 !== Type.VOID && !node.alternative) {\n      this.raise(SyntaxError, 'If expression with consequent value must have alternative', node);\n    }\n\n    if (node.alternative) {\n      const t1 = visitBranch('els{', node.alternative);\n      if (t0 !== t1) {\n        this.raise(TypeError, `consequent returns ${t0} but alternative returns ${t1}`, node);\n      }\n    }\n\n    if (t0 !== Type.VOID) {\n      if (node.statement) {\n        this.raise(TypeError, `Expected ${Type.VOID} but got ${t0}`, node);\n      }\n      this.push(t0);\n    }\n  }\n\n  visitBlock(node) {\n    this.pushScope();\n    this.visitStatementList(node.statements);\n    this.popScope();\n    if (node.statement) {\n      const t0 = this.pop();\n      if (t0 !== Type.VOID) {\n        this.raise(TypeError, `Expected ${Type.VOID} but got ${t0}`, node);\n      }\n    }\n  }\n}\n\nmodule.exports = { Assembler };\n","'use strict';\n\nconst { kMessage } = require('./util');\nconst { Type } = require('./type');\nconst { Parser } = require('./parser');\nconst { Assembler } = require('./assembler');\n\nfunction translate(source, {\n  specifier = '(anonymous)',\n  returnType = Type.VOID,\n  getSource,\n} = {}) {\n  try {\n    const ast = Parser.parse(source, specifier);\n    const {\n      warnings,\n      output,\n    } = Assembler.assemble(ast, returnType, source, specifier, getSource);\n    return {\n      output,\n      messages: warnings.map((w) => ({\n        level: 'warning',\n        ...w,\n      })),\n    };\n  } catch (e) {\n    /* istanbul ignore else */\n    if (e && e[kMessage]) {\n      return {\n        output: '',\n        messages: [{\n          level: 'error',\n          ...e[kMessage],\n        }],\n      };\n    }\n    /* istanbul ignore next */\n    throw e;\n  }\n}\n\nmodule.exports = {\n  translate,\n};\n\n/* istanbul ignore next */\nif (require.main === module) {\n  /* eslint-disable global-require */\n  const fs = require('fs');\n  const path = require('path');\n\n  const getSource = (referrer, specifier) => {\n    const resolved = path.join(referrer === '(repl)' ? '.' : path.basename(referrer), specifier);\n    const source = fs.readFileSync(resolved, 'utf8');\n    return {\n      source,\n      specifier: resolved,\n    };\n  };\n\n  if (process.argv[2]) {\n    const { output, messages } = translate(getSource('.', process.argv[2]).source, {\n      specifier: process.argv[2],\n      getSource,\n    });\n    messages.forEach((m) => {\n      process.stderr.write(`${m.level}: ${m.message}\\n${m.detail}\\n`);\n    });\n    process.stdout.write(output);\n  } else {\n    const repl = require('repl');\n    const util = require('util');\n\n    repl.start({\n      prompt: '> ',\n      eval(source, c, f, cb) {\n        const { output, messages } = translate(source, {\n          specifier: '(repl)',\n          getSource,\n        });\n        cb(null, `${messages.map((m) => `${m.level}: ${m.message}\\n${m.detail}`).join('\\n')}\\n${output}`.trimStart());\n      },\n      writer: (v) => (typeof v === 'string' ? v : util.inspect(v)),\n    });\n  }\n}\n"],"names":["Lexer","Token","TokenPrecedence","require$$0","createError","require$$1","OperatorOverload","Parser","createMessage","require$$2","Type","SimVarTypes","require$$3"],"mappings":"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"}